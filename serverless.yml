service: omni-dw-api-services

provider:
  name: aws
  runtime: python3.7
  versionFunctions: true
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 30
  memorySize: 256
  deploymentBucket: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
  role: ${ssm:/omni-dw/${self:provider.stage}/lambda/role}
  apiName: ${self:service}-api-${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "logs:PutSubscriptionFilter"
      Resource:
        - arn:aws:logs:us-east-1:332753493246:destination:bce-logs-cw-destination-us-east-1-${self:provider.stage}
  vpc:
    securityGroupIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
    subnetIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}
  stackTags:
    Application: DataWarehouse
    CreateBy: BizCloudExperts
    Version: "1.0"
    Environment: ${self:provider.stage}

custom:
  warmup:
    default:
      enabled: false
      alias: ${self:custom.alias}
      role: WarmupRole
  alias: ${opt:alias, 'v1'}
  apiKeys: ${file(config/${self:provider.stage}ApiKeys.yaml):keys}
  serverless-layers:
    functions:
      - shipment-info
      - shipment-detail
      - invoice-detail
      - create-shipment
      - shipment-create
      - bill-of-lading
      - custom-authorizer
      - update-shipment-status
      - customer-entitlement-sync
      - pod
      - freightlabel
    dependenciesPath: ./requirements.txt
  standardResponseHeaders:
    "Access-Control-Allow-Origin": "'*'"
    "Access-Control-Allow-Credentials": "'true'"
    "Access-Control-Allow-Headers": "'*'"
  logSubscription:
    enabled: true
    destinationArn: arn:aws:logs:${self:provider.region}:332753493246:destination:bce-logs-cw-destination-${self:provider.region}-${self:provider.stage}
    filterPattern: '{$.service-name = "*"}'

plugins:
  - serverless-layers
  - serverless-add-api-key
  - serverless-plugin-multiple-responses
  - serverless-plugin-warmup
  - serverless-aws-alias-fixed
  - serverless-plugin-existing-s3
  - serverless-offline
  - serverless-plugin-log-subscription

package:
  individually: true
  exclude:
    - "**/*"
    - serverless.yaml

functions:
  shipment-info: ${file(config/functions/shipment-info.yml):function}
  shipment-detail: ${file(config/functions/shipment-detail.yml):function}
  invoice-detail: ${file(config/functions/invoice-detail.yml):function}
  create-shipment: ${file(config/functions/create-shipment.yml):function}
  bill-of-lading: ${file(config/functions/bill-of-lading.yml):function}
  pod: ${file(config/functions/pod.yml):function}
  custom-authorizer: ${file(config/functions/custom-authorizer.yml):function}
  update-shipment-status: ${file(config/functions/update-shipment-status.yml):function}
  customer-entitlement-sync: ${file(config/functions/customer-entitlement-sync.yml):function}
  get-rating: ${file(config/functions/get-rating.yml):function}
  shipment-list: ${file(config/functions/shipment-list.yml):function}
  uploadpoddocument: ${file(config/functions/uploadpoddocument.yml):function}
  add-document: ${file(config/functions/shipment-add-document.yml):function}
  shipment-rate: ${file(config/functions/shipment-rate.yml):function}
  freightlabel: ${file(config/functions/freightlabel.yml):function}
  get-document: ${file(config/functions/get-document.yml):function}
  get-document-alb: ${file(config/functions/get-document-alb.yml):function}
  add-milestone: ${file(config/functions/shipment-add-milestone.yml):function}
  shipment-create: ${file(config/functions/shipment-create.yml):function}
  shippeo-pod-upload-doc: ${file(config/functions/shippeo-pod-upload-doc.yml):function}
  # shipment-header-table-stream-processor: ${file(config/functions/shipment-header-table-stream-processor.yml):function}

resources:
  Resources:
    WarmupRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WarmupRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: omni-dw-api-services-dev-warmup-plugin-default
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Warmer lambda to send logs to CloudWatch
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                  Resource:
                    - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/omni-dw-api-services-dev-warmup-plugin-default:*
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/omni-dw-api-services-dev-warmup-plugin-default:*:*
                # Warmer lambda to invoke the functions to be warmed
                - Effect: "Allow"
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
                # Warmer lambda to manage ENIS (only needed if deploying to VPC, https://docs.aws.amazon.com/lambda/latest/dg/vpc.html)
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
    ShippeoPODRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ShippeoPODRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: omni-dw-api-services-dev-shippeo-pod-role
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sqs:GetQueueUrl"
                    - "sqs:GetQueueAttributes"
                    - "sqs:ReceiveMessage"
                    - "sqs:DeleteMessage"
                    - "sqs:SendMessageBatch"
                  Resource: "*"
    BadRequestResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        ResponseTemplates:
          application/json: |
            {
              "errorDescription":"$context.authorizer.message"
            }
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "400"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    
    # Shipment File table stream queue
    ShipmentFileTableStreamQueue: ${file(config/queues/shipmentFileTableStream.yml):ShipmentFileTableStreamQueue}
    ShipmentFileTableStreamDLQ: ${file(config/queues/shipmentFileTableStream.yml):ShipmentFileTableStreamDLQ}

    DocumentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-document-${self:provider.stage}
        LifecycleConfiguration:
          Rules:
            - Status: Enabled
              ExpirationInDays: 1