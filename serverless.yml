service: omni-dw-api-services

provider:
  name: aws
  runtime: python3.7
  versionFunctions: true
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 30
  memorySize: 256
  deploymentBucket: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
  role: ${ssm:/omni-dw/${self:provider.stage}/lambda/role}
  apiName: ${self:service}-api-${self:provider.stage}
  vpc:
    securityGroupIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
    subnetIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}
  stackTags:
    Application: DataWarehouse
    CreateBy: BizCloudExperts
    Version: "1.0"
    Environment: ${self:provider.stage}

custom:
  alias: ${opt:alias, 'v1'}
  prune:
    automatic: true
    number: 8
  apiKeys: ${file(config/${self:provider.stage}ApiKeys.yaml):keys}
  serverless-layers:
    functions:
      - shipment-info
      - shipment-detail
      - invoice-detail
      - create-shipment
      - bill-of-lading
      - custom-authorizer
      - update-shipment-status
      - customer-entitlement-sync
      - get-rating
      - pod
      - uploadpoddocument
      - freightlabel
    dependenciesPath: ./requirements.txt
  standardResponseHeaders:
    "Access-Control-Allow-Origin": "'*'"
    "Access-Control-Allow-Credentials": "'true'"
    "Access-Control-Allow-Headers": "'*'"

plugins:
  - serverless-layers
  - serverless-add-api-key
  - serverless-plugin-multiple-responses
  - serverless-aws-alias-fixed
  - serverless-plugin-existing-s3
  - serverless-provisioned-concurrency-autoscaling
  - serverless-prune-plugin

package:
  individually: true
  exclude:
    - "**/*"
    - serverless.yaml

functions:
  shipment-info: ${file(config/functions/shipment-info.yml):function}
  shipment-detail: ${file(config/functions/shipment-detail.yml):function}
  invoice-detail: ${file(config/functions/invoice-detail.yml):function}
  create-shipment: ${file(config/functions/create-shipment.yml):function}
  bill-of-lading: ${file(config/functions/bill-of-lading.yml):function}
  pod: ${file(config/functions/pod.yml):function}
  custom-authorizer: ${file(config/functions/custom-authorizer.yml):function}
  update-shipment-status: ${file(config/functions/update-shipment-status.yml):function}
  customer-entitlement-sync: ${file(config/functions/customer-entitlement-sync.yml):function}
  get-rating: ${file(config/functions/get-rating.yml):function}
  wd-api: ${file(config/functions/wd-api.yml):function}
  shipment-list: ${file(config/functions/shipment-list.yml):function}
  uploadpoddocument: ${file(config/functions/uploadpoddocument.yml):function}
  freightlabel: ${file(config/functions/freightlabel.yml):function}
  wd-api-international: ${file(config/functions/wd-api-international.yml):function}

resources:
  Resources:
    BadRequestResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        ResponseTemplates:
          application/json: |
            {
              "errorDescription":"$context.authorizer.message"
            }
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "400"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
