service: java-lambda-for-amazon-pod

layers:
  JAVA:
    path: lambdaLayer
    name: java-lambda-layer
    description: java lambda layer
    compatibleRuntimes:
      - java11
    retain: false

provider:
  name: aws
  runtime: java11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  vpc:
    securityGroupIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
    subnetIds:
      - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}

package:
  artifact: target/hello-dev.jar

resources:
  Resources:
    AmazonPODRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AmazonPODRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: java-lambda-for-amazon-pod-role
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - secretsmanager:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - ec2:DescribeNetworkInterfaces
                    - ec2:CreateNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DescribeInstances
                    - ec2:AttachNetworkInterface
                  Resource: "*"

functions:
  upload-doc:
    name: ${self:service}-upload-doc-${self:provider.stage}
    handler: com.serverless.Handler
    role: AmazonPODRole
    layers:
      - !Ref JAVALambdaLayer
    package:
      patterns:
        - src/**
        - "!*/**"
