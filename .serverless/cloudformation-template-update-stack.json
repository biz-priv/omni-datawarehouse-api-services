{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ShipmentDashinfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-shipment-info-dev"
      }
    },
    "ShipmentDashdetailLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-shipment-detail-dev"
      }
    },
    "InvoiceDashdetailLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-invoice-detail-dev"
      }
    },
    "CreateDashshipmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-create-shipment-dev"
      }
    },
    "BillDashofDashladingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-bill-of-lading-dev"
      }
    },
    "CustomDashauthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-custom-authorizer-dev"
      }
    },
    "UpdateDashshipmentDashstatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-update-shipment-status-dev"
      }
    },
    "CustomerDashentitlementDashsyncLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/omni-dw-customer-entitlement-sync-dev"
      }
    },
    "ShipmentDashinfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/shipment-info.zip"
        },
        "FunctionName": "omni-dw-shipment-info-dev",
        "Handler": "src/shipmentInfo.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "shipment info api service - dev",
        "Environment": {
          "Variables": {
            "db_username": "bceuser1",
            "db_password": "BizCloudExp1",
            "db_name": "test_datamodel",
            "db_host": "10.9.130.79",
            "db_port": "5439",
            "SHIPMENT_DETAILS_TABLE": "omni-dw-shipment-details-dev",
            "SHIPMENT_DETAILS_TABLE_INDEX": "HouseBillKeyIndex"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2"
        ]
      },
      "DependsOn": [
        "ShipmentDashinfoLogGroup"
      ]
    },
    "ShipmentDashdetailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/shipment-detail.zip"
        },
        "FunctionName": "omni-dw-shipment-detail-dev",
        "Handler": "src/shipmentDetail.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "shipment detail api service - dev",
        "Environment": {
          "Variables": {
            "db_username": "bceuser1",
            "db_password": "BizCloudExp1",
            "db_name": "test_datamodel",
            "db_host": "10.9.130.79",
            "db_port": "5439",
            "SHIPMENT_DETAILS_TABLE": "omni-dw-shipment-details-dev",
            "SHIPMENT_DETAILS_TABLE_INDEX": "HouseBillKeyIndex"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2"
        ]
      },
      "DependsOn": [
        "ShipmentDashdetailLogGroup"
      ]
    },
    "InvoiceDashdetailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/invoice-detail.zip"
        },
        "FunctionName": "omni-dw-invoice-detail-dev",
        "Handler": "src/invoiceDetail.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "invoice detail api service - dev",
        "Environment": {
          "Variables": {
            "db_username": "bceuser1",
            "db_password": "BizCloudExp1",
            "db_name": "test_datamodel",
            "db_host": "10.9.130.79",
            "db_port": "5439"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2"
        ]
      },
      "DependsOn": [
        "InvoiceDashdetailLogGroup"
      ]
    },
    "CreateDashshipmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/create-shipment.zip"
        },
        "FunctionName": "omni-dw-create-shipment-dev",
        "Handler": "src/createShipment.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "create shipment api service - dev",
        "Environment": {
          "Variables": {
            "CUSTOMER_ENTITLEMENT_TABLE": "omni-dw-customer-entitlement-dev",
            "ACCOUNT_INFO_TABLE": "omni-dw-account-info-dev",
            "SHIPMENT_DETAILS_TABLE": "omni-dw-shipment-details-dev",
            "CUSTOMER_ENTITLEMENT_TABLE_INDEX": "HouseBillNumberindex",
            "ACCOUNT_INFO_TABLE_INDEX": "CustomerIDIndex",
            "FILE_NUMBER_TABLE": "omni-dw-customer-filenumber-dev"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2"
        ]
      },
      "DependsOn": [
        "CreateDashshipmentLogGroup"
      ]
    },
    "BillDashofDashladingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/bill-of-lading.zip"
        },
        "FunctionName": "omni-dw-bill-of-lading-dev",
        "Handler": "src/billOfLading.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "bill of lading api service - dev",
        "Environment": {
          "Variables": {
            "billOfLading_key": "8e3855c5e046cbb4fe2ea4cd20a40a",
            "FILE_NUMBER_TABLE": "omni-dw-customer-filenumber-dev"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2"
        ]
      },
      "DependsOn": [
        "BillDashofDashladingLogGroup"
      ]
    },
    "CustomDashauthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/custom-authorizer.zip"
        },
        "FunctionName": "omni-dw-custom-authorizer-dev",
        "Handler": "src/customAuthorizer.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "custom authorizer - dev",
        "Environment": {
          "Variables": {
            "TOKEN_VALIDATION_TABLE": "omni-dw-token-validator-dev",
            "CUSTOMER_ENTITLEMENT_TABLE": "omni-dw-customer-entitlement-dev",
            "TOKEN_VALIDATION_TABLE_INDEX": "ApiKeyindex",
            "FILE_NUMBER_TABLE": "omni-dw-customer-filenumber-dev"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2"
        ]
      },
      "DependsOn": [
        "CustomDashauthorizerLogGroup"
      ]
    },
    "UpdateDashshipmentDashstatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/update-shipment-status.zip"
        },
        "FunctionName": "omni-dw-update-shipment-status-dev",
        "Handler": "src/updateShipmentStatus.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "update shipment status - cloudwatch trigger - dev",
        "Environment": {
          "Variables": {
            "db_username": "bceuser1",
            "db_password": "BizCloudExp1",
            "db_name": "test_datamodel",
            "db_host": "10.9.130.79",
            "db_port": "5439",
            "SHIPMENT_DETAILS_TABLE": "omni-dw-shipment-details-dev",
            "SHIPMENT_DETAILS_TABLE_INDEX": "HouseBillKeyIndex"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2"
        ]
      },
      "DependsOn": [
        "UpdateDashshipmentDashstatusLogGroup"
      ]
    },
    "CustomerDashentitlementDashsyncLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sls-deploy-omni-dev",
          "S3Key": "serverless/omni-dw/dev/1600921121392-2020-09-24T04:18:41.392Z/customer-entitlement-sync.zip"
        },
        "FunctionName": "omni-dw-customer-entitlement-sync-dev",
        "Handler": "src/customerEntitlementSync.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::332281781429:role/dw-lambda-redshift-role",
        "Runtime": "python3.7",
        "Timeout": 30,
        "Description": "customer entitlement sync - dev",
        "Environment": {
          "Variables": {
            "tableName": "omni-dw-customer-entitlement-dev",
            "bucket": "dw-datapipeline-dev"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-02f89a176b75daa56"
          ],
          "SubnetIds": [
            "subnet-01b73865bdb44c156"
          ]
        }
      },
      "DependsOn": [
        "CustomerDashentitlementDashsyncLogGroup"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "omni-dw-api-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceShipment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "shipment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceShipmentInfo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceShipment"
        },
        "PathPart": "info",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceShipmentDetail": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceShipment"
        },
        "PathPart": "detail",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceInvoice": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "invoice",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceInvoiceDetail": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceInvoice"
        },
        "PathPart": "detail",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCreateShipment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCreate"
        },
        "PathPart": "shipment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBilloflading": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "billoflading",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodShipmentInfoGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceShipmentInfo"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ShipmentDashinfoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodShipmentDetailGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceShipmentDetail"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ShipmentDashdetailLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodInvoiceDetailGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceInvoiceDetail"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InvoiceDashdetailLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCreateShipmentPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCreateShipment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashshipmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodBillofladingGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBilloflading"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BillDashofDashladingLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "CustomDashauthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.x-api-key",
        "Name": "custom-authorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "CustomDashauthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "REQUEST"
      }
    },
    "ApiGatewayDeployment1600921109490": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodShipmentInfoGet",
        "ApiGatewayMethodShipmentDetailGet",
        "ApiGatewayMethodInvoiceDetailGet",
        "ApiGatewayMethodCreateShipmentPost",
        "ApiGatewayMethodBillofladingGet"
      ]
    },
    "ShipmentDashinfoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ShipmentDashinfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CustomDashauthorizerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CustomDashauthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "ShipmentDashdetailLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ShipmentDashdetailLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InvoiceDashdetailLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InvoiceDashdetailLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashshipmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashshipmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "BillDashofDashladingLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BillDashofDashladingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "sls-deploy-omni-dev"
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    },
    "OmniDashdwDashdevDashpythonDashdefaultLambdaLayerQualifiedArn": {
      "Value": "arn:aws:lambda:us-east-1:332281781429:layer:omni-dw-dev-python-default:2",
      "Export": {
        "Name": "OmniDashdwDashdevDashpythonDashdefaultLambdaLayerQualifiedArn"
      }
    }
  }
}